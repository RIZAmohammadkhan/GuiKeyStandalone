# D:\RustMonitoringSuite\Makefile.toml

[env]
PROFILE = { value = "release" } # Default to release
RUST_PROFILE = { value = "${PROFILE}" }
CLIENT_CRATE_NAME = "activity_monitor_client_core"
SERVER_CRATE_NAME = "local_log_server"
GENERATOR_CRATE_NAME = "activity_generator_gui"
WORKSPACE_ROOT_PATH = "${CARGO_MAKE_CRATE_WORKSPACE_PATH}"
TARGET_BASE_DIR = "${WORKSPACE_ROOT_PATH}/target"
COMPILED_BINARIES_SOURCE_DIR = "${TARGET_BASE_DIR}/${PROFILE}"
EMBEDDED_ASSETS_BASE_DIR = "${WORKSPACE_ROOT_PATH}/${GENERATOR_CRATE_NAME}/src/embedded_assets"
CLIENT_PAYLOAD_DEST_PATH = "${EMBEDDED_ASSETS_BASE_DIR}/client_template_payload.bin"
SERVER_PAYLOAD_DEST_PATH = "${EMBEDDED_ASSETS_BASE_DIR}/server_template_payload.bin"
SERVER_PACKAGE_CONTENT_DEST_DIR = "${EMBEDDED_ASSETS_BASE_DIR}/server_package_content"
SERVER_STATIC_DEST_DIR = "${SERVER_PACKAGE_CONTENT_DEST_DIR}/static"
SERVER_TEMPLATES_DEST_DIR = "${SERVER_PACKAGE_CONTENT_DEST_DIR}/templates"
SERVER_STATIC_SRC_DIR = "${WORKSPACE_ROOT_PATH}/${SERVER_CRATE_NAME}/static"
SERVER_TEMPLATES_SRC_DIR = "${WORKSPACE_ROOT_PATH}/${SERVER_CRATE_NAME}/templates"

[config]
default_to_workspace = false
skip_core_tasks = false

# --- TASKS ---

[tasks.clean-all]
description = "Cleans all target directories for the workspace."
category = "Cleanup"
command = "cargo"
args = ["clean"]
install_crate = false

[tasks.clean]
alias = "clean-all"

[tasks.check-env]
private = true
script_runner = "@shell"
script = '''
echo "WORKSPACE_ROOT_PATH: ${WORKSPACE_ROOT_PATH}"
echo "PROFILE: ${PROFILE}"
echo "RUST_PROFILE: ${RUST_PROFILE}"
echo "CLIENT_CRATE_NAME: ${CLIENT_CRATE_NAME}"
echo "COMPILED_BINARIES_SOURCE_DIR: ${COMPILED_BINARIES_SOURCE_DIR}"
echo "EMBEDDED_ASSETS_BASE_DIR: ${EMBEDDED_ASSETS_BASE_DIR}"
'''

[tasks.build-client]
description = "Builds the activity_monitor_client_core crate."
dependencies = ["check-env"]
command = "cargo"
args = ["build", "--package", "${CLIENT_CRATE_NAME}", "--profile", "${RUST_PROFILE}"]

[tasks.build-server]
description = "Builds the local_log_server crate."
dependencies = ["check-env"]
command = "cargo"
args = ["build", "--package", "${SERVER_CRATE_NAME}", "--profile", "${RUST_PROFILE}"]

[tasks.prepare-generator-assets]
description = "Builds client/server and copies assets for the generator GUI."
dependencies = [
    "check-env",
    "build-client",
    "build-server"
]
script_runner = "@rust"
script = '''
use std::fs;
use std::path::PathBuf;

fn copy_dir_contents(src: &PathBuf, dest: &PathBuf) -> std::io::Result<()> {
    if !src.exists() || !src.is_dir() {
        return Ok(());
    }
    
    fs::create_dir_all(dest)?;
    
    for entry in fs::read_dir(src)? {
        let entry = entry?;
        let src_path = entry.path();
        let dest_path = dest.join(entry.file_name());
        
        if src_path.is_dir() {
            copy_dir_contents(&src_path, &dest_path)?;
        } else {
            fs::copy(&src_path, &dest_path)?;
        }
    }
    Ok(())
}

// Get environment variables set by cargo-make or defined in [env]
let client_crate_name = std::env::var("CLIENT_CRATE_NAME").expect("CLIENT_CRATE_NAME env var not found");
let server_crate_name = std::env::var("SERVER_CRATE_NAME").expect("SERVER_CRATE_NAME env var not found");
let compiled_binaries_source_dir = PathBuf::from(std::env::var("COMPILED_BINARIES_SOURCE_DIR").expect("COMPILED_BINARIES_SOURCE_DIR env var not found"));

println!("DEBUG: Client crate name: {}", client_crate_name);
println!("DEBUG: Server crate name: {}", server_crate_name);
println!("DEBUG: Compiled binaries source dir: {:?}", compiled_binaries_source_dir);

// List all files in the target directory for debugging
if compiled_binaries_source_dir.exists() {
    println!("DEBUG: Files in target directory:");
    match fs::read_dir(&compiled_binaries_source_dir) {
        Ok(entries) => {
            for entry in entries {
                if let Ok(entry) = entry {
                    let path = entry.path();
                    let is_file = path.is_file();
                    let file_name = entry.file_name();
                    println!("  - {:?} (file: {})", file_name, is_file);
                }
            }
        }
        Err(e) => println!("ERROR: Cannot read directory: {}", e),
    }
} else {
    println!("ERROR: Target directory does not exist: {:?}", compiled_binaries_source_dir);
}

let client_exe_name = format!("{}.exe", client_crate_name);
let server_exe_name = format!("{}.exe", server_crate_name);

let client_exe_src_path = compiled_binaries_source_dir.join(&client_exe_name);
let server_exe_src_path = compiled_binaries_source_dir.join(&server_exe_name);

println!("DEBUG: Looking for client binary: {:?}", client_exe_src_path);
println!("DEBUG: Looking for server binary: {:?}", server_exe_src_path);

// Check if binaries exist
if !client_exe_src_path.exists() {
    panic!("Client binary not found at {:?}. The build-client task may have failed.", client_exe_src_path);
}

if !server_exe_src_path.exists() {
    panic!("Server binary not found at {:?}. The build-server task may have failed.", server_exe_src_path);
}

let client_payload_dest_path = PathBuf::from(std::env::var("CLIENT_PAYLOAD_DEST_PATH").expect("CLIENT_PAYLOAD_DEST_PATH env var not found"));
let server_payload_dest_path = PathBuf::from(std::env::var("SERVER_PAYLOAD_DEST_PATH").expect("SERVER_PAYLOAD_DEST_PATH env var not found"));

let server_static_src_dir = PathBuf::from(std::env::var("SERVER_STATIC_SRC_DIR").expect("SERVER_STATIC_SRC_DIR env var not found"));
let server_templates_src_dir = PathBuf::from(std::env::var("SERVER_TEMPLATES_SRC_DIR").expect("SERVER_TEMPLATES_SRC_DIR env var not found"));
let server_static_dest_dir = PathBuf::from(std::env::var("SERVER_STATIC_DEST_DIR").expect("SERVER_STATIC_DEST_DIR env var not found"));
let server_templates_dest_dir = PathBuf::from(std::env::var("SERVER_TEMPLATES_DEST_DIR").expect("SERVER_TEMPLATES_DEST_DIR env var not found"));
let embedded_assets_base_dir = PathBuf::from(std::env::var("EMBEDDED_ASSETS_BASE_DIR").expect("EMBEDDED_ASSETS_BASE_DIR env var not found"));

println!("Preparing generator assets...");

fs::create_dir_all(&embedded_assets_base_dir).expect("Failed to create embedded_assets_base_dir");
fs::create_dir_all(&server_static_dest_dir).expect("Failed to create server_static_dest_dir");
fs::create_dir_all(&server_templates_dest_dir).expect("Failed to create server_templates_dest_dir");

println!("Copying client binary from {:?} to {:?}", &client_exe_src_path, &client_payload_dest_path);
fs::copy(&client_exe_src_path, &client_payload_dest_path).expect("Failed to copy client binary");

println!("Copying server binary from {:?} to {:?}", &server_exe_src_path, &server_payload_dest_path);
fs::copy(&server_exe_src_path, &server_payload_dest_path).expect("Failed to copy server binary");

if server_static_src_dir.exists() && server_static_src_dir.is_dir() {
    println!("Copying server static assets from {:?} to {:?}", &server_static_src_dir, &server_static_dest_dir);
    copy_dir_contents(&server_static_src_dir, &server_static_dest_dir).expect("Failed to copy server static assets");
} else {
    println!("WARNING: Server static assets source directory not found: {:?}", server_static_src_dir);
}

if server_templates_src_dir.exists() && server_templates_src_dir.is_dir() {
    println!("Copying server templates from {:?} to {:?}", &server_templates_src_dir, &server_templates_dest_dir);
    copy_dir_contents(&server_templates_src_dir, &server_templates_dest_dir).expect("Failed to copy server templates");
} else {
    println!("WARNING: Server templates source directory not found: {:?}", server_templates_src_dir);
}
println!("Asset preparation complete.");
'''

[tasks.build-generator]
description = "Builds the activity_generator_gui crate (respects RUST_PROFILE)."
dependencies = [
    "check-env",
    "prepare-generator-assets"
]
command = "cargo"
args = ["build", "--package", "${GENERATOR_CRATE_NAME}", "--profile", "${RUST_PROFILE}"]

[tasks.build-generator-release]
description = "Builds client, server, and generator GUI in release mode with asset preparation."
env = { PROFILE = "release", RUST_PROFILE = "release" }
dependencies = ["build-generator"]

[tasks.build-generator-debug]
description = "Builds client, server, and generator GUI in debug mode with asset preparation."
env = { PROFILE = "debug", RUST_PROFILE = "debug" }
dependencies = ["build-generator"]

[tasks.run-generator]
description = "Runs the compiled activity_generator_gui (release version)."
dependencies = ["build-generator-release"]
command = "${TARGET_BASE_DIR}/${PROFILE}/${GENERATOR_CRATE_NAME}"
args = []