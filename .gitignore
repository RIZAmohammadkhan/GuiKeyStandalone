
---
**`RustMonitoringSuite/.gitignore`**
---

A good `.gitignore` for a Rust workspace with multiple crates:

```gitignore
# Rust / Cargo
target/
Cargo.lock

# IDEs / Editors
.vscode/
.idea/
*.iml
*.ipr
*.iws
.DS_Store
*.suo
*.user
*.rsuser
*.swp
*~
*.bak

# Build artifacts and binaries from our specific projects
# (Adjust paths if your workspace structure is different or if these are direct children)
activity_monitor_client_core/target/
activity_monitor_client_core/Cargo.lock
activity_monitor_client_core/activity_monitor_client_core.exe # If you build outside target
activity_monitor_client_core/config/client_settings.toml # Actual user config, not example

local_log_server/target/
local_log_server/Cargo.lock
local_log_server/local_log_server.exe
local_log_server/local_server_config.toml # Actual user config
local_log_server/activity_logs.sqlite # Server's database
local_log_server/activity_logs.sqlite-journal # SQLite journal file
local_log_server/diag_logs_server/ # If server has its own file logs

activity_generator_gui/target/
activity_generator_gui/Cargo.lock
activity_generator_gui/activity_generator_gui.exe
activity_generator_gui/generator_gui_panic.log # Panic log for the GUI

# Files generated by the GUI into its output package
# Users should manage these themselves, but you might not want them in your dev repo
# Example if output is always to a 'generated_package' dir (unlikely for dev)
# generated_package/

# Diagnostic logs from client (if paths are fixed and relative to project root during dev)
activity_monitor_client_core/diag_logs_client/
activity_monitor_client_core/activity_data.log.bin

# OS-specific
.DS_Store
Thumbs.db
Desktop.ini

# Secrets (if any were ever to be committed by mistake - best practice is never)
*.key
*.pem
*.secret
.env

# Logs folder if created at workspace root for some reason
logs/
activity_generator_gui/src/embedded_assets/client_template_payload.bin
activity_generator_gui/src/embedded_assets/server_template_payload.bin